<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo个人博客搭建</title>
    <link href="/2022/07/20/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/20/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="记录Hexo个人博客搭建"><a href="#记录Hexo个人博客搭建" class="headerlink" title="记录Hexo个人博客搭建"></a>记录Hexo个人博客搭建</h1><h2 id="搭建具体参考杰哥博客"><a href="#搭建具体参考杰哥博客" class="headerlink" title="搭建具体参考杰哥博客"></a>搭建具体参考杰哥博客</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//yangdijie.github.io/<span class="hljs-number">2022</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span>/<span class="hljs-number">2022</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%B42</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%882</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%97</span><span class="hljs-variable">%A5-hexo</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%90</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%9</span>A<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%A2</span>/<span class="hljs-variable">#2</span>-Hexo-<span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%AC</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%B0</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%99</span><br></code></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一款静态博客生成器。静态的意思是指生成的博客网站访客只能浏览，没法像淘宝那样在我们的网站上提交信息。Hexo 负责把我们写的 Markdown 文件根据选定的主题（规定网站的外观样式的文件）生成一堆 HTML 以及负责外观样式的 CSS 和 Javascript 文件。此外，Hexo 还提供了帮我们把这一堆 HTML、CSS、Javascript 文件上传到 Github 服务器的功能，也就是部署。</p><h2 id="gihub-Page"><a href="#gihub-Page" class="headerlink" title="gihub Page"></a>gihub Page</h2><p>我们平时在新浪上看新闻的时候，所有的东西都要从新浪服务器发送到我们的手机、电脑上。我们的网站也一样，需要一个服务器，把用 Hexo 生成的那些 HTML、CSS、Javascript 文件发送给访客。但我们自己没有服务器呀？Github Pages 是 Github 提供的一项免费的静态页面托管服务，提供 your_name.github.io 的域名（your_name 为你的 Github 用户名）发布自己的静态网站。我们把 Hexo 生成的内容上传到 Github 服务器，访客的浏览器就是从 Github 服务器获取相关文件的。</p><h2 id="使用Hexo建立站点"><a href="#使用Hexo建立站点" class="headerlink" title="使用Hexo建立站点"></a>使用Hexo建立站点</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>切换node源为淘宝镜像</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> registry <span class="hljs-string">&quot;https://registry.npm.taobao.org&quot;</span><br></code></pre></td></tr></table></figure><p>使用nodejs来为我们安装</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h3 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h3><ol><li><p>先在电脑中的某一位置建立好 <code>your_name.github.io</code> 文件夹，比如 <code>D:\Blog\your_name.github.io</code>；</p></li><li><p>在终端中切换到 <code>your_name.github.io</code> 文件夹所在的路径。需要注意的是，在 Windows 中，如果要进入某个磁盘，不需要敲 <code>cd</code>，直接敲盘符即可。比如我要进入 <code>D:\Blog\your_name.github.io</code>，那就输入 <code>D:</code> 回车，然后再 <code>cd Blog\your_name.github.io</code>；</p></li><li><p>根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/setup.html">开始使用 — 建站</a>，依次执行下面两条命令，建立我们的新网站：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init<br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>换了淘宝的镜像后，应该能在几分钟内完成。完成后，<code>your_name.github.io</code> 文件夹下面的目录如下：</p><p><strong>其他没有的文件夹由于版本更新，尚未完全去了解，有需求的可自行去hexo官网了解。</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">.</span><br><span class="hljs-bullet"></span>├── <span class="hljs-emphasis">_config.yml</span><br><span class="hljs-emphasis">├── package.json</span><br><span class="hljs-emphasis">├── scaffolds</span><br><span class="hljs-emphasis">├── source</span><br><span class="hljs-emphasis">|   └── _</span>posts<br>└── themes<br></code></pre></td></tr></table></figure><ul><li><code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。</li><li><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。</li><li><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。</li><li><code>source</code> 是存放用户资源的地方的文件夹，除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线) 的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。</li><li><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题已经在里面了。不同的主题可以根据自己的需要去网上下载，下载完成后放到主题文件夹，下载的主题一般来讲的话都是具有参考文档的会告诉你如何进行主题的切换</li></ul></li><li><p>根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/commands.html">开始使用 — 命令</a>，在终端中敲入 <code>hexo server</code> 命令（确保路径仍在 <code>your_name.github.io</code> 下），可以在 <a href="http://localhost:4000/">http://localhost:4000/</a> 中看到我们网站默认的样子了。</p></li><li><p>这个时候我们的本地网站其实已经建好了，但是并没有部署在我们的github page上，要在 Github 上创建项目，当然首先需要<a href="https://github.com/join?source=header-home">注册 Github帐号</a>。在注册完成后，Github 的官方文档 <a href="https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github">Create a new repository on GitHub</a> 已经图文并茂将如何建立一个 repository 交待得非常清楚明白了，唯一要注意的是，第二步里的 Repository name 一定要是 <code>your_name.github.io</code> ，<code>your_name</code> 是你的 Github 用户名。</p></li><li><p>因为<code>your_name.github.io</code>托管的是静态页面，所以我们首先必须将我们利用hexo建立好的网站生成静态文件，在我们建立的站点目录下直接cmd使用hexo generate 命令生成静态文件，执行完后我们的目录会多出一个public 文件夹里面就是生成的静态文件，也就是我们需要部署（上传）到github上的内容，</p><ol><li>hexo generate 到底做了啥我也很好奇，目前给我的感觉就是将我们站点下source文件夹里面的内容进行了解析在public 下生成了静态文件</li><li>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。</li></ol></li></ol><h2 id="部署站点"><a href="#部署站点" class="headerlink" title="部署站点"></a>部署站点</h2><p>​部署站点有两种方式 一种是使用hexo 部署，另一种就是不使用hexo 进行部署</p><h3 id="使用Hexo进行部署"><a href="#使用Hexo进行部署" class="headerlink" title="使用Hexo进行部署"></a>使用Hexo进行部署</h3><p>Hexo 提供了 <code>hexo deploy</code> 命令，可以方便地将整个 <code>public</code> 文件夹部署到 Github 服务器上去。根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/deployment.html">基本操作 — 部署</a> 我们只需要做以下两步：</p><ul><li><p>在终端中运行如下命令，安装 <code>hexo-deployer-git</code> 插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>_config.yml</code> 中修改参数，如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/your_name/your_name.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>注意yml 文件冒号后的空格很重要</p></li><li><p>配置完成后直接使用<code>hexo deploy</code>命令将文件上传至Github仓库，在此之前确保静态文件已经生成，如果不想每次有了新内容后都进行一下<code>hexo g</code>,可以直接使用此命令参数<code>hexo deploy -g</code>部署之前预先生成静态文件</p></li></ul><h3 id="不使用Hexo部署"><a href="#不使用Hexo部署" class="headerlink" title="不使用Hexo部署"></a>不使用Hexo部署</h3><p>如果不使用一键部署的话那就需要手动建public下生成的静态文件上传至github仓库</p><ul><li>进入public文件夹，直接右键git bash here打开git，输入git init，将此文件夹作为仓库。</li><li>首先可以查看一下远程仓库的信息，如果没有的话 <code>git remote add origin 你的仓库地址</code>重新添加远程仓库</li><li>然后使用<code>git add .</code>将当前文件夹所有内容添加至暂存区，然后通过<code>git commit -m &#39;xxx&#39;</code>写个注释,最后通过<code>git push -u origin master</code>上传至远程仓库。 </li><li>在我们使用hexo new xxxx 生成了新博客内容后，我们需要<code>hexo g</code>重新生成静态文件，然后再重复上面操作，将新增内容上传至github仓库</li></ul><h2 id="有新内容再补充"><a href="#有新内容再补充" class="headerlink" title="有新内容再补充"></a>有新内容再补充</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令及git本地仓库搭建</title>
    <link href="/2022/07/20/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Agit%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/20/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Agit%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="git常用命令及git本地仓库搭建"><a href="#git常用命令及git本地仓库搭建" class="headerlink" title="git常用命令及git本地仓库搭建"></a>git常用命令及git本地仓库搭建</h2><ul><li><p>本地仓库搭建</p><ol><li><p>首先需要在自己的电脑安装git</p></li><li><p>配置本地用户名</p><p>在git bash终端中输入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;YOUR NAME&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;YOUR EMAIL ADDRESS&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>YOUR NAME</code> 是自己取的名字，<code>YOUR EMAIL ADDRESS</code> 是自己的邮箱。由于自己的博客网站就自己一个人提交，所以就都设置成跟 Github 用户名和邮箱相同了。但其实是可以不同的，因为对于很多项目，并不只有一个开发者，Github 允许多人向同一个 Repo 提交，这里提供用户名和邮箱，只是为了搞清楚哪些代码是谁提交的。</p></li><li><p>一般本地仓库有两种产生途径</p><ol><li><p>在某个文件夹下面通过git init 命令初始化作为本地仓库</p><p>然后在通过git remote add origin  仓库地址 建立与远程仓库的连接</p></li><li><p>在某个文件夹下通过git clone 仓库地址  将远程仓库克隆下来作为自己的本地仓库</p><p>如果直接clone的是仓库地址，会将整个仓库都克隆下来，其中仓库名称作为文件名</p></li></ol></li></ol></li><li><p>git常用命令</p><ul><li>git init ：将当前目录初始化git仓库 作为本地仓库</li><li>git add  .  : 将当前目录下所有的的文件或者文件夹提交到暂存区</li><li>git commit -m “第一次提交”： 给暂存去待提交文件添加本次提交注释</li><li>git push -u origin master ：  向远程仓库田松文件<ol><li>需要注意的是一般都是在本地代码中第一次推送的时候 需要我们手动给他加上参数-u</li><li>后面再推送至远程仓库的时候就可以不需要用到我们的-u参数了</li></ol></li><li>git remote add origin  仓库地址：重新添加远程仓库地址建立链接</li><li>git remote remove origin：删除远程仓库配置</li><li>git rm –cached “文件的位置或者路径” ：删除暂存区内容</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE笔记</title>
    <link href="/2022/07/19/JavaSE%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/19/JavaSE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="《JaveSE笔记》"><a href="#《JaveSE笔记》" class="headerlink" title="《JaveSE笔记》"></a>《JaveSE笔记》</h1><h2 id="1-java的历史"><a href="#1-java的历史" class="headerlink" title="1.java的历史"></a>1.java的历史</h2><p>jdkjava开发工具包<br>    jre jave运行环境<br>    jvmjava虚拟机</p><p>局部变量，必须声明和初始化<br>布尔值 默认为false<br>除了基本值默认为0其他都为null<br>修饰符final不存在前后循序<br>常量全大写 变量名首字母小写驼峰原则 类名首字母大写驼峰原则<br>&lt;&lt; 左移*2   &gt;&gt; 右移&#x2F;2<br>字符串连接符 +  要注意字符串所在的位置<br>三目运算符 a&gt;b ? x,y a为真返回x，为假返回y </p><p>3.26<br>包就是文件夹<br>定义包packeg 导入包 import<br>阿里巴巴开发手册规范<br>javadoc生成文档</p><h3 id="scanner类"><a href="#scanner类" class="headerlink" title="scanner类"></a>scanner类</h3><p>用scanner对象的next()和nextline()来获取用户输入的字符串，可以用hasnext()和hasnestline()来判断用户是否有下一个输入<br>凡是io流用完记得关掉它 close()<br>next()不可以获得空白，空白作为分隔符或者结束符，而nextline()就可以获得空白，它以回车为结束符，用的比较多</p><h3 id="java的基本结构为顺序结构"><a href="#java的基本结构为顺序结构" class="headerlink" title="java的基本结构为顺序结构"></a>java的基本结构为顺序结构</h3><p>#总共有三种结构：顺序结构，判断结构，循环结构,switch 每一个case就要有一个break，不然会出现case穿透现象，输出后面所有值</p><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4><p>if单选择<br>if(布尔表达式){<br>    代码块<br>}<br>if多选择<br>if(布尔表达式){<br>    代码块<br>}else{<br>    代码块<br>}<br>多重if结构<br>if(布尔表达式1){<br>    代码块1<br>}else if(布尔表达式2){<br>    代码块2<br>}else if(布尔表达式3){<br>}else{<br>    代码块3<br>}</p><p>注意：当表达式为真 就不会触发后面的语句</p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>while循环：先判断在执行<br>while(布尔表达式){<br>    循环代码块<br>}</p><p>dowhile循环：先执行一次在判断条件<br>do{<br>    循环代码块<br>}while(布尔表达式)</p><p>for循环：先判断满足条件在执行，是循环中最有效，最灵活的循环结构，循环次数在开始的时候就被确定</p><p>for(初始值,循环条件,迭代器){<br>    代码块<br>}<br>增强for循环 ：重点遍历数组和集合</p><p>break 用于强制退出循环，不执行循环剩下的语句<br>continue 终止某次循环，既跳过之后的语句，重新回到循环判定</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java方法详解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java方法详解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java方法详解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java方法详解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>静态方法：不需要示例化 直接类名.方法名调用 用static修饰 是和类一起加载的<br>非静态方法：不需要修饰但一定要示例化创建对象。通过对象.方法名调用<br>return 除了了返回方法结果外还有一个功能就是return 0;终止方法<br>什么是值传递什么是引用传递  java是值传递  java的八大基本数据类型一般都是值传递 靠返回值来修改真是的值信息，而对象数组的话一般都是引用传递<br>    值传递：会复制一份，形参无返回是不会改变实参<br>    引用传递：一般存在与对象 改变的不是形参改变的是对象</p><p>方法重载：名称相同 参数必须不同(可以是类型不同，个数不同，参数排列顺序不同)发生在本类 返回类型也可以不同或者相同<br>方法重写：名称相同 参数列表相同且返回类型必须相同  发生在父类与子类之间<br>重载：”两同三不同”<br>    同一个类 同一个方法名<br>    参数 不同 类型 顺序 个数</p><p>命令行传参：一定要写上我们的包路径 ，main方法也是可以传参的</p><p>可变参数：…类型要相同，且必须要在参数列表最后一个</p><p>递归：自己调用自己 包含两个部分递归头和递归体   递归头：递归方法的结束，什么时候不调用自身 递归体：什么时候需要调用自身</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java数组-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java数组-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java数组&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java数组&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>数组：想同类型数的有序集合<br>特点：长度是确定，长度一旦确定就不可改变<br>      必须是相同类型的数据<br>      数组中的元素可以是任何类型的数据<br>      数组变量属于引用类型，也可以看成是一个对象，数组中的每个元素可以看成是该对象的成员变量<br>      数组是存放在堆中的，无论数组中的元素类型是基本类型还是引用类型</p><p>数组的定义两种方法：在类型名后写数组符号，在变量名后面写数组符号  通过new来创建 数组长度要确定<br>静态初始化： int[] a &#x3D; {1,2,3,4}  创建+赋值<br>动态初始化: int[] a &#x3D; new int[4]  包含默认初始化  只是创建但是不会给数组赋值<br>lenth()：求数组长度</p><p>多维数组：相当于数组类的每个元素都是一个数组<br>多维数组的打印要用多个循环</p><p>Arrays类：数组工具类 包含操作数组的各个方法的工具类<br>    tostring()打印数组元素<br>    sort()数组排序默认升序</p><p>冒泡排序：总共有八种排序 时间复杂度O（n^2）</p><p>稀疏数组：用来压缩数组，获取有效值</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java内存分析-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java内存分析-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java内存分析&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java内存分析&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>java内存 堆：存放new的对象和数组<br>             可以被所有线程共享，不会存放别的对象的引用<br>         栈：存放基本数据类型（会包含这个基本类的具体数值）<br>             引用对象的变量（会存放这个对象在堆里面的具体地址）<br>         方法区：可以被所有线程共享<br>                 包含所有class和static变量</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java面向对象编程oop-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java面向对象编程oop-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java面向对象编程oop&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java面向对象编程oop&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>面向过程编程 线性思维<br>面向对象编程 分类思维<br>本质：以类的方式组织代码，以对象来组织(封装)数据 抽象<br>三大特性；继承 封装 多态<br>this：指当前对象<br>类只包含属性和方法 是抽象的，使用的时候一定要示例化<br>使用new来创建对象 的时候除了灰分配空间，还会对创建好的对象 进行默认的初始化(调用类的构造方法)和类中构造器的调用</p><p>类中构造器也成构造方法，用来初始化值，是在进行创建对象的时候必须被调用的方法，构造方法有两个特点，和类名相同，没有返回类型也不能写void<br>类的构造方法会默认存在一个无参构造，即使类中什么也没写，如果一旦写了有参构造那么无参构造就一定要写出来</p><p>可以使用alt+insert快捷键<br>来生成构造</p><p>封装：属性私有 get&#x2F;set方法来操作数据  alt+insert快捷键来生成get&#x2F;set<br>        提高程序安全性，保护数据<br>        统一接口<br>        隐藏代码实现细节<br>继承： extends java只能单继承<br>ctrl+h 打开继承树<br>在java中只会有单继承<br>子类继承父类，会拥有父类所有的方法，无法继承私有的<br>supper代表父类对象的引用，也只能出现在子类之中，子类会默认存在一个supper（）方在第一行也必须是第一个调用父类的构造方法，supper和this不能同时调用构造方法<br>supper和this的区别与注意点<br>代表的对象不同<br>    this：本身调用者这个对象<br>    supper：父类对象的引用<br>前提条件不同<br>    this：没有继承也可以使用<br>    supper：只有存在继承条件才可以死使用<br>构造方法不同<br>    this():本类的构造<br>    supper():父类的构造</p><p>方法的重写<br>    静态方法和被final修饰的不能重写<br>    父类的引用指向子类<br>    重写都是方法的重写和属性无关<br>    需要有继承关系<br>    是子类重写父类的方法执行子类的方法<br>    方法名字和参数列表必须一样。方法体不一样<br>    修饰符范围可以扩大但不能缩小<br>    抛出的异常范围可以缩小但不能扩大</p><p>为什么需要重写？<br>    1.父类的功能子类不一定需要</p><p>多态：同一方法可以根据对象的不同产生不同的行为，一个对象的实际类型是确定的(因为new)，但可以指向对象的引用的类型可以有很多，也是方法的多态，和属性无关<br>多态存在的条件：<br>    1.存在继承关系<br>    2.子类重写父类方法<br>    3.父类引用指向子类对象  Animal animal &#x3D; new Cat(); cat是继承animal的子类 Animal animal </p><pre><code class="hljs">一、使用父类类型的引用指向子类的对象； 二、该引用只能调用父类中定义的方法和变量； 三、如果子类中重写了父类中的一个方法，那么在调用这个方法的时候，将会调用子类中的这个方法；（动态连接、动态调用） </code></pre><p>个人总结：父类的引用根据new的子类对象不同而产生不同的行为</p><p>instanceof 可以判断两个类是否有联系</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java-static，final详解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java-static，final详解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java static，final详解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java static，final详解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>static：静态的<br>    在java中静态属性是和类一起加载<br>    静态方法或者类的静态属性，是可以直接通过类名. 来使用的<br>    非静态方法就不能需要类的实例化</p><pre><code class="hljs">被static修饰的成员变量和成员方法独立于该类的任何对象，也就是说他不依赖类的任何特殊实例，被类的所有实例所共享，只要这个类被加载了，java虚拟机能根据类名在运行时数据区的方法区内找到他们。静态变量（类变量）：静态变量被所有的对象共享，也就是说我们创建了 一个类的多个对象，但是这个类具有一个静态变量，那么这多个对象其实就是共享这一个静态变量，如果我们修改了这个静态变量的值，那么其他对象的静态变量值也会随之修改。非静态变量（实例变量）：如果我们创建了一个类的多个对象，那么每个对象都会有属于自己的非静态变量，当你修改一个对象的非静态变量的时候 不会引起其他对象的非静态变量值发生改变static修饰的方法 成员称作静态方法，静态方法的使用可以通过类名.方法名来进行调用，由于静态 方法在类加载的时候就已经存在，所以说静态方法并不依赖任何一个实例对象</code></pre><p>final：被final修饰的变量是常量，值不可以改变<br>       被final修饰的方法不能被重写<br>       被final修饰的类不能够被继承</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-抽象类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-抽象类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;抽象类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;抽象类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>abstract：被abstract修饰的类就为抽象类，方法为抽象方法<br>抽象类：不一定只含有抽象方法<br>        抽象类只能够继承，不能够被实例化<br>        子类继承抽象类就必须实现抽象类没有被实现的抽象方法<br>抽象方法：只有方法的定义没有方法的实现，只能存在于抽象类，有抽象方法此类必为抽象类<br>抽象方法：只有方法的定义没有方法的实现<br>思考：抽象类有没有构造器 有</p><p>抽象类是有构造器的</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-接口-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-接口-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;接口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;接口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>interfa：定义接口 相当于一种约束<br>接口只能定义抽象方法，所以接口都需要有一个实现类<br>让类实现接口就需要用到implemens关键字来实现接口<br>借口不能被实例化，也没有构造函数<br>实现接口的类，就必须实现接口中的抽象方法</p><p>抽象类和接口的区别<br>    1.抽象类除了不能够被实例化以外，其余和普通类没什么区别<br>    2.接口是完全抽象的，不存在抽象方法的实现，只能够定义<br>    抽象方法，也没有构造器，</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-内部类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-内部类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;内部类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;内部类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>成员内部类：一个类中写了另一个类。这个内部类作为外部类的成员，这个内部内可以获得外部类的私有变量和私有方法<br>局部内部类：类中的方法里面包含一个类</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-异常-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-异常-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;异常&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;异常&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>抛出异常throw:在方法内抛出  throws：抛出方法外<br>捕获异常<br>try{<br>    检测异常区域<br>}catch(什么样的异常){&#x2F;&#x2F;捕获异常<br>    捕获后怎么处理<br>}finally{<br>    异常善后工作<br>}<br>ctrl+alt+t快捷键</p><h1 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java-进阶篇-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-Java-进阶篇-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Java 进阶篇 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Java 进阶篇 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;多线程 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-JAVA内存模型（JMM）-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-JAVA内存模型（JMM）-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; JAVA内存模型（JMM） &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; JAVA内存模型（JMM） &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>java内存模型 描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节。<br>可见性：一个线程对共享变量值的修改，能够及时地被其他线程看到。<br>共享变量：如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量。</p><p>乐观锁 与 悲观锁<br>CAS（Compare And Swap 比较并且替换）是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。</p><p>CAS 是怎么实现线程安全的？<br>线程在读取数据时不进行加锁，在准备写回数据时，先去查询原值，操作的时候比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。<br>他是乐观锁的一种实现，就是说认为数据总是不会被更改，我是乐观的仔，每次我都觉得你不会渣我，差不多是这个意思。<br>cas采用的是自旋锁（一直尝试，直到成功）的思想，是一种轻量级的锁机制。</p><p>悲观锁<br>悲观锁从宏观的角度讲就是，他是个渣男，你认为他每次都会渣你，所以你每次都提防着他</p><p>AQS：也就是队列同步器，这是实现 ReentrantLock 的基础。</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-JAVA并发-理论基础-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-JAVA并发-理论基础-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JAVA并发-理论基础 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JAVA并发-理论基础 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>并发出现问题的根源 并发三要素<br>    可见性：cpu缓存引起<br>    定义：一个线程对共享变量的修改，另外一个线程能够立马看得到</p><pre><code class="hljs">原子性：分时复用引起定义:即一个操作或者多个操作，要不全部执行并且在执行的过程中不会被任何因素所打断，要么就全都不执行有序性：重排序引起定义：即程序的执行顺序按照代码的先后顺序进行执行</code></pre><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型： 1、编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。 2、指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。<br>2、内存系统的重排序。由于处理器使用缓存和读 &#x2F; 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p><p>原子性：一般来说 只有简单的赋值、读取 操作语句才有可能是原子操作 才能体现原子性 对于这种赋值来说还必须应该是将数字 赋值给某个变量，变量之间的相互赋值还不算是原子操作，为啥 因为 这涉及到两个步骤 ①他会先去读一个变量的值，然后再将这个变量的值赋值给另一个变量的值<br>我们由此可以看来 java内存模型只保证了基本读取和赋值是原子操作，如果要实现更大范围的原子操作就必须使用到java的关键字synchronized和Lock来实现</p><p>在我们java中 通常都会使用它到 synchronized 和 volatile  他们两个都是用在多线程的环境下，就目前 而言 synchronized 相对于我们的volatile怪物啊</p><p>volatile:<br>    volatile保证不同线程对共享变量操作的可见性，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值。<br>    具备两种特性 ①当我们改变了一个volatile，jmm会把线程对应的本地内存中的变量强制刷新到 ②这个写操作会导致这个其他线程<br>    使用场景：只能在有限的情形下使用volatile变量替代锁，要使volatile变量提供理想的线程安全，必须同时满足一下两个条件<br>    ①对变量的写操作不依赖于当前值。<br>    ②改变量没有包含在具有其他变量的不变市中。<br>    volatile 最适合 一个线程写 多个线程读的情况下。如果有多个线程并发写的操作</p><p>volatile 和 synchronized 的区别<br>    1、volatile 关键字是线程同步的轻量级实现，所以从性能这一方面来讲 volatile 比 synchronize要好，volatile只能修饰变量，而synchronized可以修饰方法、代码块。随着jdk版本的发布 synchronized的执行效率有很大的提升，在开发中使用synchronized的比率还是很大。<br>    2、多线程环境 访问volatile变量不会发生阻塞，而synchronized可能会发生阻塞<br>    3、volatile可以保证数据的可见性，但是不能保证原子性；而synchronize的可以保证原子性也可以保证可见性<br>    4、关键字volatile 解决的是变量在多个线程之间的可见性；synchronized关键字解决多个线程之间的访问公共资源的同步性</p><p>一个应用程序在运行时会有多个进程，而一个人进程又包含多个线程—-&gt;每个进程都会有自己的生命周期，所以每个线程也都会有自己的生命周期<br>一个进程在jvm中会有一个堆，而每一个线程都会有一个自己的栈和程序计数器，而这些线程栈会共享进程堆和方法区<br>优点：<br>    1.提高应用程序的响应<br>    2.提高计算机系统cpu的利用率<br>    3.改善程序结构<br>应用场景：<br>    1.程序需要同时执行两个或者多个任务<br>    2.程序需要实现一些需要等待的任务时，如用户输入，文件读写操作，网络操作，搜索等<br>    3.需要一些后台运行时</p><p>怎么实现多线程？</p><p>方法一：通过继承Thread类，重写run方法，用子类对象通过start方法启动线程<br>    1.创建一个继承Thread类的子类<br>    2.重写父类的run方法–&gt;run方法内容就是需要此线程做的事<br>    3.实例化子类对象，通过子类对象start方法来启动多线程</p><p>Thread类方法详解：<br>start方法：①启动当前线程 ②调用当前线程的run方法<br>run方法：通常需要重写此方法，内容就是需要此线程做的事<br>currentThread方法：静态方法，返回执行当前代码的线程<br>getname方法：获取当前线程的名字<br>setname方法：设置当前线程的名字<br>yield方法：释放当前cpu执行权<br>join方法：在线程a中调用线程b的join方法，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态<br>stop方法：已过时，强制结束线程<br>sleep方法：带参数毫秒，让当前线程”睡眠“，在指定的毫秒内，线程是阻塞状态<br>isalive方法：判断线程是否还存活</p><p>线程的优先级：<br>    10 5(默认) 1<br>    getpriority方法 获取线程优先级<br>    setpriority设置线程优先级</p><p>方法二：实现Runnable类接口，重写run方法。<br>    1.创建一个实现Runnable接口的实现类<br>    2.实现runnabl接口类中的run方法<br>    3.示例化一个实现类的对象<br>    4.将这个对象作为参数传递给thread类的构造方法中，创建thread类的对象<br>    5.还是通过这个thread类对象调用start方法</p><p>方法一与方法二比较：<br>开发中优先使用实现Runnable接口的方式来创建<br>原因：<br>    1.实现的方法没有单继承的局限性<br>    2.自然而然的解决多个线程共享数据的问题</p><p>相同点：其实thread类也实现了Runnable接口<br>    1.都需要重写run()方法，将索要执行的逻辑写在run方法之中</p><pre><code class="hljs">经典例题：消费者生产者问题</code></pre><p>方法三：实现callable接口重写call方法并使用future来获取call方法的返回结果<br>    jdk5.0新增方式</p><pre><code class="hljs">1.创建一个实现callable接口的实现类2.实现call方法，将需要此线程所做的操作内容写入此方法中，需要注意的是call方法是具有返回值的3.创建实现类对象4.将此实现类对象作为参数传入futuretask构造器之中，创建futuretask对象5.将futuretask对象又作为参数出入thread构造器之中，创建thread对象6.通过thread对象的start方法来启动线程7.就可以通过futuretask对象的get方法获取到call方法的返回值，也就是线程的返回值，这个时候可能会异常需要抛出。实现runable接口和实现callable接口都可以实现多线程而实现callable接口相比于实现runable接口的优点在于call方法有返回值，并且还可以抛出异常也支持泛型 run方法没有返回值 </code></pre><p>方法四：实现多线程池<br>    线程池；有多个线程组成的池子，提前创建多个线程，使用时直接获取，用完后返回，可以实现线程的重复利用<br>    有点：①减少创建新线程的时间，提高响应速度<br>          ②重复利用线程，避免资源浪费<br>          ③便于线程管理<br>        corepoolsize：核心池的大小<br>        maxnumpoolsize：最大线程数<br>        keepalivetime：线程存在时间<br>    ExecutorsService: 真正的线程池接口。常用的子类为ThreadPoolExecutors  通过这个子类的对象可以设置我们的线程池，使我们的线程池便于管理<br>    Execuyors：线程池工厂类，用于创建线程池<br>    1.实例化创建指定数量的的线程池<br>    2.执行指定的线程的操作。需要提供实现Runnable接口或callable接口实现类的对象<br>    3.通过shoutdown方法关闭线程池<br>线程的生命周期：一般有五种状态<br>    创建，就绪，运行，阻塞，死亡<br>new<br>runnable<br>blocked<br>waitting</p><p>新建：当一个线程被new的时候就是新建<br>就绪：当线程调用start方法后就是进入就绪状态，此时还没有被CPU分配资源<br>运行：当线程获取到CPU执行权是就处于运行状态，当正在运行的线程失去CPU执行权或者被挂起时就又回到了就绪状态<br>阻塞：当正在运行的线程出现sleep，join，wait，等待同步锁，suspend的方法时，线程就会进入阻塞状态，阻塞状态结束的时候会回到就绪状态等待CPU执行<br>死亡：当正在运行的线程执行完run方法或者调用stoop方法或者出现异常没有解决的时候线程就会死亡，一个线程的最终状态也就是死亡</p><p>线程的同步：其实也就是为了解决线程的安全问题</p><p>同步的方法一：同步代码块<br>    利用synchronized（同步监视器）{<br>        &#x2F;&#x2F;这里就是需要被同步的代码  同步的代码可以理解为操作共享数据的代码，就是需要被同步的代码  共享数据就是多个线程操作的变量<br>    }<br>    说明：同步监视器 俗称锁 任何一个类的对象都可以充当锁 所有的线程需要共用一把锁</p><pre><code class="hljs">synchronized 优点：解决线程安全问题             缺点：操作同步代码块的时候其实只允许一个线程运行，其他的线程则需要等待，相当于是一个单线程的过程效率低</code></pre><p>同步的方法二：同步方法<br>    也是利用synchronized 将方法申明为同步方法<br>    也会涉及到同步监视器，只不过不会显示声明<br>    对于静态方法的监视器 默认为当前类本身<br>    对于非静态方法默认为 this 当前对象</p><pre><code class="hljs">死锁问题    不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，这样就形成了死锁问题</code></pre><p>同步的方法三：lock锁接口<br>        先要实例化lock<br>        调用lock上锁<br>        就一定要调用unlock解锁调用</p><pre><code class="hljs">synchronized与lock锁的异同相同点：都可以解决线程安全问题不同点：synchronized在执行完同步代码块的内容时会自动释放lock锁        lock需要我们手动上锁，和手动解锁    线程安全问题的解决方式有三种    同步代码块    同步方法    lock锁接口    线程的通信wait():执行此方法就会使当前线程就进入阻塞状态，并释放同步监视器notify()：执行此方法就会唤醒被wait的一个线程，此时如果有多个线程被wait就会唤醒优先级比较高的线程 都是位于java.Objectnotifyall()：执行此方法就会唤醒所有被wait的线程 都是位于java.Object类。这三种方法的使用必须是在同步方法或者同步代码块之中这三种方法的调用者也不一样 同步代码块或者同步方法的对象也就是同步监视器这三种方法都是定义在onject类之中sleep方法和wait方法的异同    相同点：都可以使线程进入阻塞状态    不同点：申明的位置不同 sleep申明在threed类之中 wait申明在object之中            调用要求不同 sleep在任何需要调用的地方都可以调用，wait只能在同步代码快之中调用            是否释放同步监视器 如果两个方法都定义在同步代码快或者同步方法之中，sleep不会释放锁 wait会释放锁</code></pre><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java常用类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java常用类-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java常用类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java常用类&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>一，字符串相关的类<br>    String类及常用方法：<br>        String是一个final类，不能够被继承也具有不可变性，字符内容实际上是存在一个字符数组之中<br>        String实现了Serializable接口：表示字符串是支持序列化得<br>              实现了Comparable接口:表示字符串是可以比较大小的<br>        具有不可变性：也就是说在对字符串内容进行修改或者赋值是，都会在方法区字符串常量池之中重新赋值<br>        通过字面量的方式赋值，不同于其他类的对象通过new，此时字符串是存放在方法区的字符串常量池之中<br>        而且方法区的字符串常量池中是不允许存储相同内容的字符串</p><pre><code class="hljs">    String的实例化方式    方式一：通过字面量方式    方式二：通过new+构造器的方式        面试题：String s = new String（“abc”）创建了几个对象？            两个对象，一个堆里面的new构造器 一个方法区里面的abc        字符串调用interm方法，返回值就在方法区的字符串常量池之中    int length():返回字符串的长度值    char charAt(int n):返回某索引处的字符    boolean isEmpty():判断字符串是否为空    String toLowercase():默认语言环境，将字符串中所有字符转换为小写    String toUppercase():默认语言环境，将字符串中所有字符转换为大写    String trim():返回字符串副本，忽略首部空白和尾部空白    boolean equals(object obj)：比较字符串的内容是否相同    boolean equalsIgnoreCase(object obj)：比较字符串的内容是否相同，会忽略大小写    String concat(String str):将指定字符串连接到此字符串的结尾 类似于+    int compareTo(String anotherStr):比较两个字符串的大小    String substring(int beginindex)：截取字符串，返回索引之后的字符串    String substring(int beginindex，int endindex)：截取字符串，返回索引开始到结束的中间的的字符串，需要注意的是不会包含结束的那个索引也就是左闭又开    boolean endswitch(String str)：测试字符串是否为指定字符串样进行结尾的    boolean startswitch(String str)：测试字符串是否为指定字符串样进行开头的    boolean startswitch(String str，int)：测试字符串在指定索引处是否为指定字符串样进行开头的    boolean contains(String str)：判断字符串内是否包含指定字符串    int indexOf(String str)：返回指定字符串在字符串中出现的索引位置    int indexOf(String str，int index)：返回指定字符串在指定索引后字符串中出现的索引位置    int lastindexOf(String str)：返回指定字符串在字符串中出现的索引位置，从后往前找    int lastindexOf(String str，int index)：返回指定字符串在指定索引前字符串中出现的索引位置，从后往前找    注意：没找到都默认返回-1    替换：    String replace(String oldstr,String newstr):将字符串中旧串替换为新串    匹配：    boolean matches(String regex):告知此字符串是否符合给定的正则表达式    切片：    String[] sqlit(String regex):根据给定的正则表达式拆分字符串        String类型与基本数据类型转换问题    String--》基本类型：不能通过强转将字符串转换为基本类型，而应该调用基本类型的包装类的静态parseXXX(str)方法    基本类型--》String：调用String重载的valueof(基本类型)方法 或者通过+拼接&quot;&quot;字符串也可以        String类型与char[]字符数组转换问题    String--》char[]:调用String类的tocharArray()方法返回字符数组    char[]--》string:将字符数组作为参数传入String的构造器中，就可返回得到一个字符串        String类型与byte[]转换问题    String--&gt;byte[]:直接调用String的getbytes()    byte[]--&gt;string：将byte[]作为参数传入String的构造器中，就可返回得到一个字符串Stringbuffer类：    是可变序列，线程也是安全的，效率低 这个时候问题来了 我们为什么要说StringBuffer 是线程安全的呢 因为StringBuffer每一个公开的方法都是被synchronized 关键字所修饰 只允许一个线程进行访问 这样的话就导致效率偏低    StringBuffer append(XXX):字符串拼接    StringBuffer delete(int startindex,int endindex):删除[str,end)指定位置内容左闭又开    StringBuffer replace(int str,int end,String str):吧[str,end)的内容替换为str    StringBuffer insert(int index,XXX):在指定位置插入XXX    StringBuffer reverse():把当前字符串逆转    public indexOf(String str)    public String substring(int start,int end)    public int length()    public char charAt(int n)    public void setcharAt(int n,char ch)将索引处的字符替换为ch    Stringbuilder类：    也是可变序列，线程是不安全的，但是效率高String 与StringBuffer与StringBuilder的异同String ①不可变的字符序列 内容和长度是不可以进行修改的，②并且重写了equals方法，③可以使用+来进行字符串的拼接Stringbuffer可变的字符序列 线程安全 效率低   ，Stringbuilder可变的字符序列 线程不安全 效率高 相同点：都与字符串相关;底层都是通过char[]字符数组进行存储的</code></pre><p>二，jdk8之前得日期时间api<br>    System静态方法 currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒之间的毫秒差，称为时间戳<br>    Date类<br>        掌握两个构造器的使用<br>            Date() 创建当前时间的date对象<br>            Data(时间戳) 创建指定毫秒数的date对象<br>        掌握两个方法的使用<br>            tostring()打印显示当前年月日时分秒<br>            getTime()获取时间戳<br>    Calender类<br>        是一个抽象类不能被直接实例化<br>        通常创建GregorianCalendar()子类对象或者调用其静态方法getinstance（）来进行实例化</p><pre><code class="hljs">    常用方法        get（）        set（）        add（）        gettime（）        settime（）    SimpleDdateFormat类 对date类的格式化和解析常用格式：Date date = new Date();          SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);          System.out.println(simpleDateFormat.format(date));    格式化：将日期转化为字符串 通过format（Data date）    解析：将字符串转化为日期 通过parse（）  要求格式必须符合格式化的格式，否侧会抛异常        Date年偏移量1900 月偏移量1</code></pre><p>三，jdk8新增日期时间api<br>    以前的问题：有偏移性，线程也不是安全，<br>    新版具有不可变性<br>    实例化 调用now（）方法获取当前<br>    of（）方法：设置指定年月日时分秒，没有偏移量<br>    getXXX（）获取需要的值<br>    withXXX（）设置需要的值</p><pre><code class="hljs">LocalDate本地日期LocalTime本地时间LocalDateTime本地日期时间Instant 时间线上的一个点DateTimeFormatter通过ofpattern方法来进行实例化类似于simpleDateformater用于格式化和解析</code></pre><p>四，Java比较器<br>    Comparable接口 自然排序<br>    像String,包装类等实现了compareable接口，重写compareto（obj）方法 这个方法的内容就是比较两个对象的方法 默认从小到大<br>    Comparator接口 订制排序按照参数来比较<br>    重写compare（object obj，object obj）<br>    （这两个接口都是比较对象的）<br>    两者的区别：<br>        comparable接口的方式一旦确定，保证接口实现类的对象在任何位置都可以比较大小<br>        comparator接口属于临时性的比较。</p><p>五，System类<br>    方法<br>        exit():退出系统<br>六，Math类<br>提供一些常用的数学方法<br>    abs 绝对值<br>    random 随机数<br>七，BigInteger和BigDecimal<br>    前者对数字长度<br>    后者对数字特别是浮点数精度可以做处理</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-枚举型-amp-注解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-枚举型-amp-注解-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;枚举型&amp;注解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;枚举型&amp;注解&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>枚举类<br>    类似数学枚举法 类的对象是有限个的并且是确定的<br>    当需要定义一组常量时，强烈建议使用enum<br>    如果枚举类中只有一个对象，就可以看成单例模式的一种实现方式<br>    枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>    当需要定义一组常量时，强烈建议使用枚举类<br>    如果枚举类中只有一个对象，则可以作为单例模式的实现方式（详细见构建者模式之单例模式）。<br>    枚举类的属性<br>    枚举类对象的属性不应允许被改动, 无setter()方法，所以应该使用 private final 修饰；<br>    枚举类的使用 private final 修饰的属性应该在构造器中为其赋值 ；<br>    枚举类的对象有限，所以构造器应该设置成私有，不允许外界添加；<br>    若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数。</p><p>​<br>​如何定义枚举类？<br>​方式一：jdk5.0之前 自定义枚举类<br>​①申明自定义枚举类对象的属性：用private final修饰<br>​②私有类的构造器，并给对象属性赋值<br>​③提供当前类的多个枚举对象，public static final的<br>​④其他诉求：获取枚举类对象的属性通过gat&#x2F;set方法<br>​⑤其他诉求：提供toString方法，避免对象打印出地址值<br>​方式二：jdk5.0 通过enum关键字<br>​如何使用关键字enum来定义枚举类<br>​①不需要class修饰类名而使用enum来修饰类名<br>​②提供当前枚举类的对象，多个对象之间使用‘，’隔开末尾分号结束<br>​③申明自定义枚举类对象的属性：用private final修饰<br>​④私有类的构造器，并给对象属性赋值<br>​⑤其他诉求：获取枚举类对象的属性通过gat&#x2F;set方法<br>​<br>    Enmu类的主要方法<br>        values（）返回枚举类型的对象数组可以很方便的遍历所有枚举值<br>        valueof（String str）返回一个和str同名的枚举对象，如果没有找到，会报异常<br>        tostring（）返回当前枚举类对象常量的名称<br>    实现接口的枚举类<br>        情况一：实现接口，在枚举类中实现接口抽象方法<br>        情况二：让枚举类对象分别实现抽象方法，个人感激啊有点类似于多态了</p><p>注解（Annotation）<br>    注解概述<br>        在jdk5.0新增 其实就是代码里的特殊标记<br>        框架&#x3D;注解+反射+设计模式<br>        注解前面都会有@符号<br>    常见注解示例<br>        示例一：文档注解<br>        示例二：在编译时进行格式检查（jdk中内置的三个注解）<br>            @Override 限定重写父类方法，该注解只能用于方法<br>            @Deprecated 用于表示所修饰的元素已过时<br>            @SuppressWarmings 抑制编译器警告<br>        示例三：跟踪代码依赖性，实现替代配置文件功能<br>            Servlet3.0提供注解，使得不需要在配置文件中进行servlet配置<br>            spring框架中关于事务的管理<br>    自定义注解 –参照SuppressWarmings注解定义<br>        通过@interface 关键字定义<br>        注解的成员变量无参方法的形式来申明<br>        ①注解声明为@interface<br>        ②内部定义成员通常value表示<br>        ③可以指定成员变量的默认值 通过default<br>        ④如果注解没有成员，那么就是一个标识，如果有就要给值<br>        自定义注解必须配备上特定的信息处理流程(使用反射)才有意义<br>        自定义注解通常都会指明两个元注解 retention target<br>    jdk中的元注解<br>        提供四种 元注解就是用于修饰注解的注解<br>        retention指定注解的生命周期<br>        target 用于限制注解可以修饰那些程序元素<br>    利用反射获取注解信息<br>    jdk8中注解新特性<br>        可重复注解<br>        类型注解<br>（都是jdk5.0新增内容）</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java集合-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java集合-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java集合&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java集合&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.java集合框架概述<br>    集合，数组都是对多个数据进行存储的 简称Java渣蛙容器  这个存储主要是指内存层面的，不涉及持久化<br>    Array（数组）弊端：长度确定，类型确定 提供的方法很少，对于增删改查非常的不便 不能获取到实际元素个数 有序，可重复注解<br>    分为两个大接口 Collection 单列数据存储一个一个的对象和Map 双列数据 用来存储一对一对的数据<br>    ArrayList：元素有序 可重复 线程不安全<br>    hashSet：元素无序 不可重复 线程不安全 可以存null<br>    hashMap：双列集合 也就是一种键值对的集合，其中key是不可以重复的且无序，作为key对应的value只是可以重复的 并且需要注意的是key和value都是可以为空的 同样的是 他也是线程不安全的</p><p>2.Collection接口方法<br>    单列集合<br>    add(object obj):将元素obj添加到集合的方法 注意要求obj所在的类必须重写equals方法<br>    size():获取集合元素个数<br>    addall(Collection co):将co集合的所有元素添加到集合中<br>    clear()：清空集合元素1、<br>    isEmpty():判断集合是否有元素，这是一个返回值为布尔类型的函数<br>    contains(object obj)：判断当前集合中是否包含obj 注意：我们在判断的时候会调用obj所在类的equals<br>    containsAll(Collection coll)：判断集合coll中所有元素都存在与当前集合之中<br>    remove(Object obj):从当前集合中移除元素obj 注意这个也默认要求obj所在类重写equals方法 会通过equals方法判断obj是否存在<br>    removeAll(Collection coll):从当前集合中移除coll中所有的元素 相当于数学中的差集<br>    retainALL(Collection coll)：获取当前集合和coll集合中相同的元素 相当于数学中交集<br>    equals(object obj):判断当前集合与形参集合是否相同<br>    hashcode()定义在object中 返回当前对象的哈希值</p><pre><code class="hljs">toArray()：将集合转换为数组 扩展：aslist()：将数组转换为集合 调用Arrays类的静态方法aslist()iterator():返回迭代器iterator接口的示例，用于遍历Collection集合元素 </code></pre><p>​<br>​<br>​<br>3.lterator迭代器接口<br>​一般都是通过集合对象调用iterator方法返回一个迭代器的示例<br>iterator迭代器有<br>​两个方法一个是 hasNext()判断是否还有下一个<br>​next()指针下移读取下一个值<br>​集合每次调用iterator方法时都会得到一个全新的迭代器对象<br>​默认的指针都在集合第一个元素之前<br>​迭代器内部定义了一个remove方法，可以在迭代器遍历的时候删除集合中的元素<br>​jdk5.0新增特性增强for循环 for(集合元素类型 局部变量:集合对象)<br>​<br>4.Collection子接口list 元素有序 可重复 “动态”数组 底层长度为10<br>​通常使用list来替代数组<br>​常用的实现类有三个 ArrayList LinkedList vector<br>​三者的异同：都实现了list接口，存储特点也是相同的有序可重复<br>​ArrayList 作为list主要实现类，线程是不安全的，效率高 底层使用的object[]存储<br>​<br>​LinkedList 底层使用双向链表存储，便于频繁的插入和删除<br>​vector 作为list的古老实现类 ，线程安全 效率低 底层使用的object[]存储<br>​<br>    list集合除了继承Collection的方法外还提供了根据索引来操作集合的方法<br>    void add（int index，object e）：在index出插入元素e  （如果没有写index时 会默认在集合的末尾进行数据的添加）<br>    boolen addAll(int index,collection coll):在index处，插入集合coll的所有元素<br>    Object get（int index）：获取指定集合中指定index下标处的值<br>    int indexOf（Object obj）:返回obj在当前集合中首次出现的位置<br>    int lastindexof（object obj）：返回obj在当前集合中末次出现的位置<br>    object remove（int index）：移除指定index位置的元素，并返回此元素<br>    object set（int index，object ele）：设置指定index位置的元素为ele<br>    list sublist（int fromindex，int toindex）：返回从fromindex到toindex的子集合</p><pre><code class="hljs">总结常用方法增：add(obj)  这个方法可以有两个参数，第一个参数为添加元素的下标值（可以写也可以不写，不写的话默认为数组最后一个位置），第二个元素为需要添加的元素值这个是必须要写的删：remove(Object obj)/remove(int index)  也可以是数组中存在的值也可以是数组中的下标，一般情况下都是索引-改：set(index,newdata) 此方法将数组下标索引处的值修改为新的值 需要注意的是此处的操作实际上是一个修改的操作查：get(index) 需要注意的是此方法执行时 参数一定是数组的下标值，获取数组集合某处下标处的位置插：add(index,data) 向数组集合中插入数据 需要注意的是 方法有两个参数，第一个参数是插入数据在数组集合中的下标值可以写也可以不写，不写的话默认为数组最后一个位置），第二个元素为需要添加的元素值这个是必须要写的长度：size()  注意size是元素的个数并不是底层数组的长度遍历：①iterator迭代器      ②增强for循环      ③普通for循环</code></pre><p>5.Collection子接口set 元素无序 不可重复 类似高中数学中的“集合” 底层其实是map<br>    三个主要实现类：Hashset，linkedhashset，treeaet<br>    Hashset：作为set借口的主要实现类，线程不安全可以存储null值  在底层也是通过数组+链表进行存储的(jdk7)<br>    linkedhashset：是hashset的一个子类，遍历内部是时可以按添加的循序进行遍历<br>    Treeset：可以按照添加对象的指定属性，进行排序</p><pre><code class="hljs">如何理解set接口的无序性和不可重复性      无序性：不是随机性，而是理解为以哈希值进行数组存储的的顺序    不可重复性：通过equals来判断，相同的元素只能添加一个set借口没有新添加的方法，全部使用的是Collection的方法要求：向set接口中添加数据，其所在得类一定要重写equals和hashcode方法Treeset：在添加对象时只能添加相同类的对象，可以按照添加对象的指定属性，进行排序</code></pre><p>6.Map接口  双列集合，用来存储一对一对的数据 类似高中数学中的函数<br>        key 不能重复 无序（使用set存储key  key可能是一个对象如果是一个对象的话就要求可以所在得类必须重写equals和hashcode方法）<br>        value 可以重复 一般使用colllection存储所有的value 如果value是对象 那么要求对象所在的类要重写equals方法</p><pre><code class="hljs">    一个键值对就是key-value构成一个entry对象，map中的entry对象使用set存储有三个常用的实现类分别为：Hashmap，linkedHashmap，hashTableHashmap：作为map主要的实现类，线程不安全的，效率高，能存储null的key和value  数组+链表+红黑树linkedHashmap：作为hashmap的子类，保证在遍历map元素时，可以按照添加的循序进行遍历。原因：在原有的底层基础上，添加了一对指针，指向前一个和后一个，对于频繁的遍历，效率高于hashmapTreemap：保证在key-value对进行排序，实现排序遍历，考虑对key进行自然排序和订制排序 底层使用红黑树实现hashTable：作为古老的实现类，线程安全的，效率低，不能存储null的key和value    有一个子类 properties 使用来处理配置文件的 所有的key和value都是字符串的    HsahMap的底层实现原理？在jdk8之前 使用的是数组+单向链表 在jdk8之后 使用的是 数组+链表+红黑树jdk7版本HashMap map = new HashMap();在实例化以后底层创建了一个16长度的一维数组entry[] tablemap.put(key1,value1):执行添加操作首先，调用key1所在类的hashcode方法计算哈希值，次哈希值经过某种算法后，得到在entry数组中分存放位置如果存放位置为空，此时key1-value1添加成功 ----》情况1如果存放位置不为空（意味着此位置存在一个或多个数据（以链表的形式存在））比较key1和已经存在的一个或多个数据的哈希值    如果key1的哈希值与存在的哈希值不相同，此时key1-value1添加成功 ----》情况2    如果key1的哈希值和已经存在的某一个数据（key2-value2）的哈希值相同，继续比较：调用key1所在类的equals（key2）方法        如果equals返回false：此时key1-value1添加成功 ----》情况3        如果equals返回true：使用value1替换value2结束，相当于如果有重复的key哈希值就对原先的值进行修改补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储在不断的添加过程中，会涉及到扩容的问题，当超出临界值并且存放位置索引不为空时扩容 默认的扩容方式为扩容到原来的2倍，并将原来的数据复制过来jsk8版本 相较于jdk7在底层实现的不同1.在new HashMap()：底层不会创建一个长度为16的数组2.底层的数组是node[]而非entry[]3.首次调用put方法是，才会在底层创建一个16的数组4.jdk7的底层结构为数据+链表 jdk8底层使用的是 数组+链表+红黑树    当数组的某一索引位置已经以链表的形式存在，存在的数据个数&gt;8 并且 整个数组的长度&gt;64时，    此时索引位置上的数据全部改为红黑树进行存储hashmap的哈希函数是如何设计的？ 将hashcode的高16位和低16位进行 位亦或操作 两个好处 ①尽可能降低哈希碰撞，越分散越好 ② 算法一定要尽可能高效 因为这是高频运算 追求高效 因此采用位运算</code></pre><p>​<br>​<br>​<br>​<br>​LinkedHsahMap的底层实现原理？<br>​<br>    Map接口中常用的方法</p><pre><code class="hljs">    添加，删除，修改操作方法        Object put(Object key,Object value) 将指定的key-value添加或修改到map对象之中        void putAll(Map m) 将m中所有的key-value键值对存放到当前map之中        Object remove(Object key) 将指定key的键值对移除，并返回指定key的value值        void clear():清空当前map中的所有元素        元素查询的操作        Object get(Object key): 获取指定key对应的value值        boolean containskey(Object key): 判断是否包含指定key        boolean containsvalue(Object value): 判断是否包含指定value值        int size():返回map中键值对的个数        boolean isEmpty():判断当前map是否为空        boolean equals(Object obj):判断当前map和参数对象obj是否相等            原始图的操作        set keyset():获取所有的key集合所构成的set集合        coll values():获取所有value值集合所构成的Collection集合        set entryset():返回所有key-value对所构成的set集合        总结常用的：    增：put(Object key,Object value)    删：emove(Object key)    改：put(Object key,Object value)    查：get(Object key)    长度：size()  注意size是元素的个数并不是底层数组的长度    遍历：set keyset()  /   values()  /  entryset()Treemap：中key要求必须是同一类型的对象         因为要按照key进行排序，自然排序 订制排序</code></pre><p>​<br>7.Collections工具类</p><pre><code class="hljs">面试题：Collection 和Collections的区别    Collection 是一个集合的接口 里面封装有list和set    Collections是一个用来操作list set map集合的工具类是一个操作list set map等集合的工具类常用方法    reverse(list):反转list中元素的顺序    shuffle(list):对 list集合中的元素进行随机排序    sort(list):根据元素的自然顺序对指定的list集合元素按升序排序    sort(list,compareator):根据指定的compareator对指定的list集合排序    swap(list,int i,int j):将集合list的i处和j处进行交换        Object max(collection):根据集合的自然排序，返回给定集合中最大的值    Object max(collection，compareator):根据集合的订制排序，返回给定集合中最大的值    Object min(collection)        int frequency(collection,obj):返回在指定集合中元素obj出现的次数    void copy(list1,list2)：将list2中的元素复制到list1之中        也提供了多个线程安全的方法        synchronizedXXX（list）:将list集合转化为对应的线程安全的集合</code></pre><p>​</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java泛型-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java泛型-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java泛型&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java泛型&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.为什么要有泛型<br>​泛型（generic） 可以理解为标签<br>​泛型就是在定义类的时候通过泛型来限制数据的类型，数据的类型是一定要与泛型是相同的数据类型<br>2.在集合中使用泛型<br>​在集合中不使用泛型，可能再添加数据的时候添加到了很多不一样的类型数据<br>​注意：泛型不能是基本类型，必须是包装类<br>​在集合中使用泛型进行类型检查保证数据安全<br>3.自定义泛型结构<br>​静态结构不能使用泛型<br>​异常类也不能申明为泛型<br>4.泛型在继承上的体现<br>​类a是类b的父类，所以他们就具有子父类之间的关系，但是G<a>和G<b>二者是不具备子父类的关系，二者是并列关系<br>​补充：类a是类b的父类，如果是这样a<G> 和 b<G>就具备了子父类之间的关系<br>​<br>5.通配符的使用<br>​通配符：？<br>​使用通配符之后 list&lt;?&gt; 不能向其添加数据，但是只允许添加null<br>​但是可以读取数据<br>6.泛型应用举例</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java-IO流-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java-IO流-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java IO流&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java IO流&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.File类的使用<br>    File类表示的就是文件和文件目录路径<br>    1.一个File类的对象，代表一个文件或者一个文件目录<br>    2.File类声明在java.io包下<br>    3.在File类中并没有涉及到写入或者读取文件内容的操作  注意 文件的读写操作都是通过不同的六来进行操作 但是根据本人经验相关 通常使用一个流的时候都会将一个file对象作为参数传递给流构造器<br>    4.后续File类的对象常会作为参数传递到流的构造器之中</p><pre><code class="hljs">File常用的构造器：    File(String pathname):以pathname为路径创建file对象，可以是绝对路径或者相对路径    File(String parent，String child)：以parent为父路径，child为子路径创建file对象    File(File parent，String child)：根据一个父file对象和子文件路径创建File对象Files类的常用方法    public String getabsolutepath():获取绝对路径    public String getPath()：获取路径    public String getname()：获取文件名称    public String getparent（）：获取上层文件名称，或没有就为null     public long length（）：获取文件长度（即字节数），不能获取目录的长度 注意这个length其实就是文件的大小    public long lastmodified（）：获取最后一次修改的时间，是一个时间戳毫秒值        用于文件目录    public String[] list():获取指定目录下的所有文件或者文件目录的名称数组    public File[] listFiles():获取指定目录下的所有文件或者文件目录的File数组    文件重命名    public boolean renameTo(File dest):将文件重命名为指定的文件路径     比如：File1.renameTo(File2)为例        要想保证返回true，方法执行chengg，就必须保证file1是真是存在的，file2是不能存在的        用于判断    public boolean isDirectory():判断是否是文件目录    public boolean isFile():判断是否是文件    public boolean exists():判断是否存在    public boolean canread():判断是否可读    public boolean canwrite():判断是否可写    public boolean isHidden():判断是否隐藏        创建硬盘中对应的文件或文件目录    public boolean createNewFile():创建文件，若文件存在，则不创建，返回false    public boolean mkdir():创建文件目录，如果此文件目录存在，就不创建了，如果此文件目录的上层文件不存在也不创建    public boolean mkdirs():创建文件目录，如果上层文件不存在，一并创建        注意，如果创建文件没有写路径，那么默认在项目文件路径下        删除磁盘照片那个的文件或者文件目录    public boolean delte（）：删除文件或者文件夹 删除目录时 文件 中不能还有文件夹和文件        注意：java中删除不走回收站</code></pre><p>2.IO流原理及流的分类<br>    IO：input和output的缩写 处理设备之间的数据传输<br>        在java中，数据的传输都是以流的形式进行传输</p><pre><code class="hljs">流的分类：按数据来分为字符流和字节流          按流向来分为输入流和输出流          按角色功能来分为 节点流和处理流                 流的四个抽象基类  字节流       字符流            输入流        inputStream  Reader             输出流  outoutStream Writer                节点流      处理流        Fileinput读取文件 从硬盘文件中读取数据到内存里    1.实例化file类的对象,指明要操作的文件，这文件必须存在不然会报错    2.提供具体的流 FillReader  注意  这里的意思就是 new一个流对象 但是需要注意的是要将file对象作为参数传递给流构造器    3.数据的读入        read()返回读入的一个字符，如果达到文件末尾，返回-1        read(char[] cbuf):返回每次读入cbuf数组中的字符个数，如果达到文件末尾返回-1    4.关闭数据流写入文件 从内存中写出数据到硬盘的文件里    1.示例化file类的对象，指明要操作的文件 与读取不同的是 写入的文件如果不存在，会自动帮我们创建文件    2.提供具体的流对象 FileWriter    3.写入的操作  如果重复执行会讲原文件覆盖掉        Writer(Str,append) append默认为false 就是不会追加内容    4.关闭数据流        总结：对于文本文件需要使用字符流处理      对于非文本文件需要使用字节流来进行处理</code></pre><p>3.节点流（文件流）<br>    FileinputStream 字节输入节点流  用来读取文件<br>    FileOutputStream 字节输出节点流<br>    FileReader 字符输入节点流 用来输出文件<br>    FileWriter 字符输出节点流<br>4.缓冲流<br>    处理流的一种<br>    BufferedInputStream  字节输入缓冲流<br>    BufferedOutputStream 字节输出缓冲流<br>    BufferedReader字符输入缓冲流<br>    BufferedWriter字符输出缓冲流</p><pre><code class="hljs">注意在造流的时候一定要先实例化节点流，再将节点流对象出入缓冲流构造器实例化缓冲流的对象作用：提高流的读取和写入的速度原因：内部提供了一个缓冲区处理流就是“套接”在已有的流的基础上</code></pre><p>5.转换流 属于字符流<br>    作用：提供了字节流和字符流之间的转换<br>    InputStreamReader： 将字节的输入流转换为字符的输入流<br>    OutputStreamWriter：将字符的输出流转换为字节的输出流<br>6.标准输入，输出流<br>    System.in: 标准的输入流，默认从键盘输入<br>    System.Out：标准的输出流，默认从控制台输出<br>7.打印流<br>8.数据流<br>9.对象流<br>    对象序列化机制，将java对持久化得保存在硬盘文件中，或者通过网络传输出去<br>    ObjectInputStream 反序列化 将文件中的数据转化为内存中的一个对象<br>    ObjectoutputStream 序列化 将内存中的java对象保存在磁盘中或通过网络传输出去</p><pre><code class="hljs">一个类的对象需要满足一下条件    1.实现serializable接口    2.需要当前类提供一个id常量    3.还要保证该类的所有属性也是可以序列化的 ，默认java基本数据类型都是可以序列化的    注意：static和transient修饰的成员变量是不可以进行序列化的</code></pre><p>10.随机存取文件流<br>RandomaccessFile:直接继承与object类 实现了datainput和dataouput接口 可读可写<br>11</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java网络编程-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java网络编程-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java网络编程&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java网络编程&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.网络编程概述<br>2.网络通信要素概述<br>3.通信要素1：IP和端口号<br>4.通信要素2：网络协议<br>5.TCP网络编程<br>    客户端<br>    1.创建socket的对象，指明服务器端的ip和端口号<br>    2.获取一个输出流，用于输出数据<br>    3.用流来写出数据的操作<br>    4.关闭流<br>    服务器端<br>    1.创建一个serversocket 指明自己的端口号<br>    2.调用对象的accept方法接受客户端的socket<br>    3.获取一个输入流<br>    4.通过输入流读数据<br>6.UDP网络编程<br>    客户端<br>    1.创建Datagramsocket类<br>    2.<br>7.URL编程<br>    url：统一资源定位符</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java反射机制-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java反射机制-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java反射机制&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java反射机制&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>JAVA的反射机制主要作用是用来访问对象的属性、方法等等<br>1.关于反射机制的概述 反射的特征：动态性<br>    主要使用的API<br>        java.lang.class:代表一个类<br>        java.lang.reflect.method：代表类的方法<br>        java.lang.reflect.Field：代表类的成员变量<br>        java.lang.reflect.constructor：代表类的构造器<br>2.理解class类并获取class实例<br>    1.调用运行时类的属性：.class<br>        Class class1 &#x3D; Person.class;<br>    2.通过运行时类的对象调用getClass()<br>        Person p1 &#x3D; new Persoon();<br>        Class class1 &#x3D; p1.getClass();<br>    3.调用Class的静态方法forName();<br>        Class class1 &#x3D; Class.forName(“类的全包名”);</p><p>3.类的加载和classloader的理解<br>    使用类加载器读取配置文件<br>        Properties pros &#x3D; new Prooerties();</p><p>4.创建运行时类的对象<br>    Class<Person> clazz &#x3D; Person.class;<br>    Person obj &#x3D; clazz.newInstance();</p><pre><code class="hljs">说明：newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行是类的空参的构造器。      要想此方法正常的创建运行时类的对象，要求：      1.运行时类必须提供空参的构造器      2.空参的构造器的访问权限得够。通常，设置为public。            在javabean中要求提供一个public的空参构造器。原因：      1.便于通过反射，创建运行时类的对象      2.便于子类继承此运行时类时，默认调用supper(),保证父类此构造器</code></pre><p>5.获取运行时类的完整结构<br>6.调用运行时类的指定结构<br>7.反射的应用：动态代理<br>    动态代理：<br>        1、什么是动态代理？<br>            使用jdk的反射机制，创建对象的能力，创建的是代理类的对象，而不用你创建类文件，不用写java源文件<br>            动态：在程序运行时。调用jdk提供的方法动态创建代理类的对象<br>            注意：jdk动态代理 要求目标类必须实现接口，没有接口的话就需要使用cglib动态代理<br>        2、知道动态代理能做什么？<br>            在不改变目标类的功能方法前提下，在代理类中增强自己的功能代码。</p><pre><code class="hljs">        在实际程序开发中的意思            比如 你所在的项目中，有一个功能是其他人已经写好的 你可以使用            GoNong.class;   GoNong go = new GoNong(); go.方法()                        你发现这个功能，现在还缺点意思，不能完全满足项目的需要，我们需要在go.方法()执行后，需要自己再增加代码            用代理实现go.方法()调用时，增加自己的代码，而不用去修改原GoNong文件        在静态代理中目标类很多的时候，可以使用动态代理，避免静态代理的缺点在动态代理中即使目标类很多 1）代理类的数量可以很少 2）当你修改了接口中的方法是不会影响到代理类通常我们的代理类主要完成两个功能：1）对目标类就是被代理类的方法的调用 2）在不改变原来代码的基础上实现新功能的增强动态代理是指代理类对象在程序运行是由我们的jvm动态生成的，动态代理是不需要定义代理类的.java源文件的动态代理其实jdk运行期间，动态创建class文件并加载的jvm动态代理常见的实现方式有两种 ①jdk动态代理 ②cglib动态代理依赖注入的原理就是动态代理</code></pre><p>​<br>​<br>​jdk动态代理：jdk动态代理是基于java的反射机制实现的，使用jdk中的接口和类实现代理对象的动态创建。<br>​jdk动态代理是要求我们的目标对象（被代理类）必须实现接口，这是java设计上的硬性要求<br>​从jdk1.3以来，java语言通过java.lang.reflect包提供三个类来实现动态代理 Proxy、Method、InvocationHander（InvocationHander接口叫做调用处理器，负责调用目标类的方法，并增强功能，通过代理对象调用接口中的方法，会把方法的调用分配给调用处理器的实现类也就是invocationhander接口的实现类，会自动执行类中的invoke方法），我们需要做的就是在invoke中调用目标类的方法，并进行增强。</p><p>​<br>​cglib代理：cglib是一个开源项目，是一个强大的，高性能的，高质量的code生成类库，它可以在项目运行期间扩展java类与实现java接口，它广泛的被许多AOP（面向  切面编程）框架使用，例如SpringAOP.<br>​使用JDK的Proxy实现代理，要求目标类与代理类实现相同的接口，若目标类不存在实现的接口，那么就无法使用这种方式实现动态代理。<br>​对于无接口的类，要为其创建动态代理，就要使用cglib来实现cglib的原理是生成目标类的子类，而子类都是增强过的，这些子类其实就是不同的代理类，子类对象就是代理对象。所以使用cglib实现动态代理 要求我们的目标类是要能够被继承的 即目标类不是被final所修饰的类,调用的方法也是不能被final修饰的<br>​cglib的要求是比较宽松的，只要能继承就行。经常被使用在框架中，例如spring，hibernate等，并且我们的cglib的代理效率是要高于我们的jdk的，<br>​<br>                在我们真实的项目当中是很少使用到jdk来实现动态代理的 </p><p>​<br>​JDK实现动态代理：<br>​1. 反射，Method类，表示方法，类中的某个方法，通过Method可以执行某个方法。<br>​2. jdk动态代理的实现<br>​反射包 java.lang.refrct 里面有三个东西 invocationhander、Method、Proxy<br>​1）invocationHander接口（调用处理器）：就一个方法 invoke（Object proxy,Method method,Object[] args）<br>​invoke（）：表示代理对象要执行的功能代码，我们的代理类要完成的功能就写在这个方法之中 ①调用目标方法执行目标方法的功能 ②功能增强，在目标方法调用时增加功能<br>​<br>                方法原型<br>                参数：Object proxy jdk创建的代理对象无需赋值<br>                      Method method 目标类中的方法，jdk提供method对象的<br>                      Object[] args 目标类中方法的参数，jdk提供的<br>                public Object invoke(Object proxy,Method method,Object[] args)</p><pre><code class="hljs">            invocationHander接口：表示你的代理要干什么            怎么用：①创建类实现接口invocationHander                    ②重写invoke方法，把原来静态代理类要完成的功能写在这        2）Method类:表示方法的，确切的说表示目标类中的方法            作用：通过method可以执行某个目标类的方法 method.invoke（目标对象，方法参数）        3）Proxy类：核心的对象，创建代理对象。之前创建对象都是new类的构造方法，现在我们使用proxy类的方法代替            方法：静态方法newProxyInstance() 作用是创建代理对象 等同于new一个代理类对象            参数：            1、ClassLoader loader: 类加载器 负责像内存中加载对象的，使用反射获取对象的classloader 固定写法            2、Class&lt;?&gt; interface: 接口 目标对象实现的接口，也是通过反射获取的 固定写法            3、InvocationHander h: 我们自己写的代理类要完成的功能            返回值：就是动态创建的代理对象实现步骤    1、创建接口，定义目标类要完成的功能。    2、创建目标类实现接口    3、创建InvocationHander接口的实现类，在invoke方法中完成代理对象需要完成的功能 ①调用目标方法 ②增强功能    4、使用proxy类的静态方法，创建代理对象，并把返回值转为接口类型。</code></pre><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java-JDBC-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-java-JDBC-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java  JDBC&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;java  JDBC&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1。加载数据库驱动<br>    Class.forName(“com.mysql.jdbc.Driver”);<br>2.通过Drivermanager的getConnection方法获取数据库连接对象<br>    Connection conn &#x3D; DriverManager.getConnection(“jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc”,”root”,”123456”);<br>3.通过数据库连接对象获取statement对象<br>    Statement statement &#x3D; conn.createStatement();<br>4.通过statement对象执行sql语句,并通过resultset保存返回结果<br>     ResultSet resultSet &#x3D; statement.executeQuery(“select * from tb_user”);<br>5.通过resultset对象操作结果集<br>    这里我们通常会将resultset的结果集转为list<Map><br>    &#x2F;ResultSet 转List<Map><br>    public static List&lt;Map&lt;String, Object&gt;&gt; toListMap(ResultSet ret) throws SQLException{<br>        List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; new ArrayList();<br>        ResultSetMetaData meta &#x3D; ret.getMetaData();<br>        int cot &#x3D; meta.getColumnCount();</p><pre><code class="hljs">    while(ret.next()) &#123;        Map&lt;String, Object&gt; map = new HashMap();        for(int i = 0; i &lt; cot; i++) &#123;            map.put(meta.getColumnName(i + 1), ret.getObject(i + 1));        &#125;        list.add(map);    &#125;    return list;&#125;</code></pre><p>在我们的mybatis中 是如何批量插入或者更新数据的呢？<br>    一般我们通常会在XML文件中使用mybatis的<foreach>标签循环遍历<br>    在我们的mybatis中我们的foreach标签经常被使用到遍历集合，构建in条件语句和批量删除<br>    SELECT * FROM product_<br>    WHERE ID in<br>            <foreach item="item" index="index" collection="list"                open="(" separator="," close=")"><br>                         #{item}<br>            </foreach><br>    foreach 标签主要有以下属性，说明如下。<br>        item：表示集合中每一个元素进行迭代时的别名。<br>        index：指定一个名字，表示在迭代过程中每次迭代到的位置。<br>        open：表示该语句以什么开始（既然是 in 条件语句，所以必然以(开始）。<br>        separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以,作为分隔符）。<br>        close：表示该语句以什么结束（既然是 in 条件语句，所以必然以)开始）<br>    使用 foreach 标签时，最关键、最容易出错的是 collection 属性，该属性是必选的，但在不同情况下该属性的值是不一样的，主要有以下 3 种情况：<br>        如果传入的是单参数且参数类型是一个 List，collection 属性值为 list。<br>        如果传入的是单参数且参数类型是一个 array 数组，collection 的属性值为 array。<br>        如果传入的参数是多个，需要把它们封装成一个 Map，当然单参数也可以封装成 Map。Map 的 key 是参数名，collection 属性值是传入的 List 或 array 对象在自己封装的 Map 中的 key。</p><p>浅说一下mybatis的缓存<br>    一级缓存：基于PerpetualCache的HashMap本地缓存，其存储作用域为Session，当我们的session flush或者close之后，该session中的所有Cache就将清空，默认打开一级缓存</p><pre><code class="hljs">二级缓存：与一级缓存及其机制相同，默认也是采用PerpetualCache，HashMap存储，不同在于其存储作用域为Mapper（namespace），并且可以自定义存储源，如Ehcache。默认不打开二级缓存，要想开启二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口（可用来保存对象的状态），可在它的映射文件中配置；</code></pre><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-java执行过程-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-java执行过程-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; java执行过程 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; java执行过程 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>java执行过程通常来说 有两个关键步骤 编译 解释执行<br>java类在被加载到虚拟机中是有七个 生命周期<br>.java文件其实就是我们程序员所书写的java源码<br>.class文件 是我们</p><p>双亲委托模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，<br>而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，<br>只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要加载的类）时，子加载器才会尝试自己去加载。<br>使用双亲委托机制的好处是：能够有效确保一个类的全局唯一性，当程序中出现多个限定名相同的类时，类加载器在执行加载时，始终只会加载其中的某一个类。<br>注意：所谓限定名其实就是 含包文件路径类名称 全限定名&#x3D; 包名+类名</p><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-JDK8-新特性-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-JDK8-新特性-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; JDK8 新特性 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; JDK8 新特性 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1、Lambda表达式<br>    其实偶然细想一下java8 有两个新特性 很像我们的es6的语法 就想我们的这个lambda表达式 像不像es6的箭头函数 你品 你细品<br>    举例：（o1，o2）-&gt; Integer.compare(o1,o2)<br>    格式：<br>            -&gt; : Lambda操作符 或者叫做 剪头操作符<br>            -&gt;左边 ：lambda形参列表 （其实就是接口中抽象方法的形参列表）<br>            -&gt;右边 ：Lambda体（其实就是重写的抽象方法的方法体）<br>    lambda表达式的使用（分为6种情况）<br>        语法格式一：无参，无返回值<br>        Runnable r1 &#x3D; ()-&gt;{System.out.println(“hello world”);};<br>        语法格式二：lambda需要一个参数，但是没有返回值<br>        Consumer<String> con &#x3D; (String str)-&gt;{System.out.println(str);};<br>        语法格式三：数据类型可以省略，因为可由编译器推断得出 称为 类型推断<br>        Consumer<Stting> str &#x3D; (str)-&gt;{System.out.println(str);}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/19/hello-world/"/>
    <url>/2022/07/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
